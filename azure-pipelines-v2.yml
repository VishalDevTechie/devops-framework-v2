trigger:
  branches:
    include: ['main', 'develop', 'release/*']
  paths:
    exclude: ['README.md', 'docs/*']

pr:
  branches:
    include: ['main', 'develop']

resources:
  repositories:
    - repository: framework
      type: github
      name: VishalDevTechie/devops-framework-v2
      ref: development
      endpoint: GitHub connection
    - repository: service
      type: github
      name: VishalDevTechie/dsa-visualizer
      ref: development
      endpoint: GitHub connection

pool:
  name: Default

parameters:
  - name: deploymentMode
    displayName: "Deployment Mode"
    type: string
    default: smart-auto
    values:
      - smart-auto        # Full auto-detection and deployment
      - analysis-only     # Analysis and config generation only
      - build-only       # Build and containerize only
      - full-pipeline    # Complete pipeline with deployment

variables:
  DOCKER_SERVICE_CONNECTION: 'DockerHubConnection'
  AKS_SERVICE_CONNECTION: 'AKSConnection'
  DOCKER_REPOSITORY: 'vishal10101'
  DEPLOYMENT_MODE: ${{ parameters.deploymentMode }}

stages:
  - stage: SmartAnalysis
    displayName: 'Smart Framework Analysis'
    jobs:
      - job: AnalyzeApplication
        displayName: 'Analyze Angular Application'
        steps:
          - checkout: framework
            displayName: 'Checkout DevOps Framework'
            path: s/framework
          
          - checkout: service
            displayName: 'Checkout Service Application'
            path: s/service
          
          - task: UsePythonVersion@0
            displayName: 'Setup Python'
            inputs:
              versionSpec: '3.9'
              addToPath: true
          
          - task: PowerShell@2
            displayName: 'Install Framework Dependencies'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Installing Framework Dependencies" -ForegroundColor Green
                Write-Host "Agent working directory: $(Agent.BuildDirectory)"
                Write-Host "Build source directory: $(Build.SourcesDirectory)"
                
                # Navigate to framework directory using the correct path
                $frameworkPath = Join-Path "$(Build.SourcesDirectory)" "framework"
                Write-Host "Framework path: $frameworkPath"
                
                # Check if framework directory exists
                if (Test-Path $frameworkPath) {
                    Write-Host "Framework directory found" -ForegroundColor Green
                    Set-Location $frameworkPath
                    Write-Host "Changed to framework directory"
                    Write-Host "Current directory: $(Get-Location)"
                    
                    # List contents to verify
                    Write-Host "Directory contents:"
                    Get-ChildItem | Format-Table Name, Length, LastWriteTime
                    
                    if (Test-Path "requirements.txt") {
                        Write-Host "Installing Python dependencies..." -ForegroundColor Yellow
                        python -m pip install --upgrade pip
                        pip install -r requirements.txt
                        
                        if ($LASTEXITCODE -eq 0) {
                            Write-Host "Dependencies installed successfully" -ForegroundColor Green
                        } else {
                            Write-Host "Failed to install dependencies" -ForegroundColor Red
                            exit 1
                        }
                    } else {
                        Write-Host "requirements.txt not found in framework directory" -ForegroundColor Red
                        Write-Host "Available files:"
                        Get-ChildItem | Format-Table Name
                        exit 1
                    }
                } else {
                    Write-Host "Framework directory not found at: $frameworkPath" -ForegroundColor Red
                    Write-Host "Available directories in Build.SourcesDirectory:"
                    Get-ChildItem "$(Build.SourcesDirectory)" | Where-Object {$_.PSIsContainer} | Format-Table Name
                    exit 1
                }
          
          - task: PowerShell@2
            displayName: 'Run Smart Analysis'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(Build.SourcesDirectory)/framework'
              script: |
                Write-Host "Running Smart Analysis..." -ForegroundColor Green
                
                $servicePath = Join-Path "$(Build.SourcesDirectory)" "service"
                
                if (-not (Test-Path $servicePath)) {
                    Write-Host "ERROR: Service repository not found at: $servicePath" -ForegroundColor Red
                    exit 1
                }
                
                Write-Host "Service path: $servicePath" -ForegroundColor Cyan
                Write-Host "Executing: python scripts/run_analysis.py" -ForegroundColor Yellow
                
                python scripts/run_analysis.py "$servicePath"
                
                if ($LASTEXITCODE -ne 0) {
                    Write-Host "Analysis failed with exit code: $LASTEXITCODE" -ForegroundColor Red
                    exit $LASTEXITCODE
                }
                
                Write-Host "Analysis completed successfully" -ForegroundColor Green
          
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Analysis Results'
            inputs:
              targetPath: '$(Build.SourcesDirectory)/framework/analysis-results.json'
              artifact: 'analysis-results'

  - stage: SmartBuild
    displayName: 'Smart Build & Containerize'
    dependsOn: SmartAnalysis
    condition: and(succeeded(), in(variables.DEPLOYMENT_MODE, 'smart-auto', 'build-only', 'full-pipeline'))
    jobs:
      - job: BuildApplication
        displayName: 'Build Angular Application'
        steps:
          - checkout: framework
            displayName: 'Checkout DevOps Framework'
            path: s/framework
          
          - checkout: service
            displayName: 'Checkout Service Application'
            path: s/service
          
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'analysis-results'
              path: $(Pipeline.Workspace)
          
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.9'
          
          - task: PowerShell@2
            displayName: 'Install Framework Dependencies'
            inputs:
              targetType: 'inline'
              script: |
                $frameworkPath = Join-Path "$(Build.SourcesDirectory)" "framework"
                Set-Location $frameworkPath
                pip install -r requirements.txt
          
          - task: Docker@2
            displayName: 'Docker Login'
            inputs:
              command: 'login'
              containerRegistry: $(DOCKER_SERVICE_CONNECTION)
          
          - task: PowerShell@2
            displayName: 'Execute Smart Build Pipeline'
            inputs:
              targetType: 'inline'
              workingDirectory: '$(Build.SourcesDirectory)/framework'
              script: |
                Write-Host "Running Smart Build..." -ForegroundColor Green
                
                $servicePath = Join-Path "$(Build.SourcesDirectory)" "service"
                $analysisFile = Join-Path "$(Pipeline.Workspace)" "analysis-results.json"
                
                Write-Host "Service path: $servicePath" -ForegroundColor Cyan
                Write-Host "Analysis file: $analysisFile" -ForegroundColor Cyan
                
                if (-not (Test-Path $servicePath)) {
                    Write-Host "ERROR: Service repository not found" -ForegroundColor Red
                    exit 1
                }
                
                if (-not (Test-Path $analysisFile)) {
                    Write-Host "ERROR: Analysis results not found" -ForegroundColor Red
                    exit 1
                }
                
                Write-Host "Executing: python scripts/run_build.py" -ForegroundColor Yellow
                python scripts/run_build.py "$servicePath" "$analysisFile"
                
                if ($LASTEXITCODE -ne 0) {
                    Write-Host "Build failed with exit code: $LASTEXITCODE" -ForegroundColor Red
                    exit $LASTEXITCODE
                }
                
                Write-Host "Build completed successfully" -ForegroundColor Green
          
          - task: Docker@2
            displayName: 'Docker Logout'
            inputs:
              command: 'logout'
              containerRegistry: $(DOCKER_SERVICE_CONNECTION)
            condition: always()

  - stage: SmartDeploy
    displayName: 'Smart Deployment to AKS'
    dependsOn: SmartBuild
    condition: and(succeeded(), in(variables.DEPLOYMENT_MODE, 'smart-auto', 'full-pipeline'))
    jobs:
      - deployment: DeployToAKS
        displayName: 'Deploy to AKS Cluster'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: framework
                  displayName: 'Checkout DevOps Framework'
                  path: s/framework
                
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download Analysis Results'
                  inputs:
                    artifact: 'analysis-results'
                    path: $(Pipeline.Workspace)
                
                - task: UsePythonVersion@0
                  displayName: 'Setup Python'
                  inputs:
                    versionSpec: '3.9'
                
                - task: PowerShell@2
                  displayName: 'Install Framework Dependencies'
                  inputs:
                    targetType: 'inline'
                    script: |
                      Write-Host "Installing Framework Dependencies" -ForegroundColor Green
                      Write-Host "Build source directory: $(Build.SourcesDirectory)"
                      Write-Host "Agent build directory: $(Agent.BuildDirectory)"
                      
                      # Navigate to framework directory
                      $frameworkPath = "$(Build.SourcesDirectory)"
                      Write-Host "Framework path: $frameworkPath"
                      
                      if (Test-Path $frameworkPath) {
                          Set-Location $frameworkPath
                          Write-Host "Changed to framework directory"
                          Write-Host "Current directory: $(Get-Location)"
                          
                          if (Test-Path "requirements.txt") {
                              Write-Host "Installing Python dependencies..." -ForegroundColor Yellow
                              python -m pip install --upgrade pip
                              pip install -r requirements.txt
                              
                              if ($LASTEXITCODE -eq 0) {
                                  Write-Host "Dependencies installed successfully" -ForegroundColor Green
                              } else {
                                  Write-Host "Failed to install dependencies" -ForegroundColor Red
                                  exit 1
                              }
                          } else {
                              Write-Host "requirements.txt not found in framework directory" -ForegroundColor Red
                              Get-ChildItem | Format-Table Name
                              exit 1
                          }
                      } else {
                          Write-Host "Framework directory not found at: $frameworkPath" -ForegroundColor Red
                          Write-Host "Available directories:"
                          Get-ChildItem "$(Build.SourcesDirectory)" | Where-Object {$_.PSIsContainer} | Format-Table Name
                          exit 1
                      }
                - task: PowerShell@2
                  displayName: 'Generate Kubernetes Manifests'
                  inputs:
                    targetType: 'inline'
                    workingDirectory: '$(Build.SourcesDirectory)'
                    script: |
                      Write-Host "Generating Kubernetes Manifests..." -ForegroundColor Green
                      
                      $analysisFile = Join-Path "$(Pipeline.Workspace)" "analysis-results.json"
                      
                      Write-Host "Analysis file: $analysisFile" -ForegroundColor Cyan
                      
                      if (-not (Test-Path $analysisFile)) {
                          Write-Host "ERROR: Analysis results not found" -ForegroundColor Red
                          exit 1
                      }
                      
                      Write-Host "Executing: python scripts/run_deploy.py" -ForegroundColor Yellow
                      python scripts/run_deploy.py "$analysisFile"
                      
                      if ($LASTEXITCODE -ne 0) {
                          Write-Host "Deployment preparation failed with exit code: $LASTEXITCODE" -ForegroundColor Red
                          exit $LASTEXITCODE
                      }
                      
                      Write-Host "Manifest generation completed successfully" -ForegroundColor Green
                
                - task: Kubernetes@1
                  displayName: 'Connect to AKS and Create Namespace'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(AKS_SERVICE_CONNECTION)
                    command: 'apply'
                    useConfigurationFile: true
                    configurationType: 'inline'
                    inline: |
                      apiVersion: v1
                      kind: Namespace
                      metadata:
                        name: default
                        labels:
                          managed-by: devops-framework-v2
                  continueOnError: true
                
                - task: Kubernetes@1
                  displayName: 'Deploy Application to AKS'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(AKS_SERVICE_CONNECTION)
                    command: 'apply'
                    useConfigurationFile: true
                    configurationType: 'filePath'
                    configuration: '$(Build.SourcesDirectory)/generated-k8s-manifest.yaml'
                    outputFormat: 'yaml'
                
                - task: Kubernetes@1
                  displayName: 'Wait for Rollout to Complete'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(AKS_SERVICE_CONNECTION)
                    command: 'rollout'
                    arguments: 'status deployment/$(Build.Repository.Name) --timeout=300s --namespace=default'
                  timeoutInMinutes: 10
                
                - task: Kubernetes@1
                  displayName: 'Get Application Status'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(AKS_SERVICE_CONNECTION)
                    command: 'get'
                    arguments: 'all -l managed-by=devops-framework-v2 --namespace=default -o wide'
                
                - task: Kubernetes@1
                  displayName: 'Get Service External IP'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(AKS_SERVICE_CONNECTION)
                    command: 'get'
                    arguments: 'service --namespace=default -o wide'
                
                - task: PowerShell@2
                  displayName: 'Display Deployment Summary'
                  inputs:
                    targetType: 'inline'
                    script: |
                      Write-Host "Deployment completed!" -ForegroundColor Green
                      Write-Host "Deployment Summary:" -ForegroundColor Cyan
                      Write-Host "  Application: $(Build.Repository.Name)" -ForegroundColor White
                      Write-Host "  Namespace: default" -ForegroundColor White
                      Write-Host "  Environment: production" -ForegroundColor White
                      Write-Host "  Build: $(Build.BuildNumber)" -ForegroundColor White
                      Write-Host ""
                      Write-Host "Next Steps:" -ForegroundColor Yellow
                      Write-Host "  1. Check the External IP from the service output above"
                      Write-Host "  2. Access your application at http://<EXTERNAL-IP>"
                      Write-Host "  3. Monitor deployment: kubectl get pods --namespace=default"
