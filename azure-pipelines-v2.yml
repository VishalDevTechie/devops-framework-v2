# trigger:
#   branches:
#     include: ['main', 'develop', 'release/*']
#   paths:
#     exclude: ['README.md', 'docs/*']

# pr:
#   branches:
#     include: ['main', 'develop']

# resources:
#   repositories:
#     - repository: angular-app
#       type: github
#       name: VishalDevTechie/dsa-visualizer
#       endpoint: GitHub connection

# pool:
#   name: Default

# parameters:
#   - name: deploymentMode
#     displayName: "Deployment Mode"
#     type: string
#     default: smart-auto
#     values:
#       - smart-auto        # Full auto-detection and deployment
#       - analysis-only     # Analysis and config generation only
#       - build-only       # Build and containerize only
#       - full-pipeline    # Complete pipeline with deployment

# variables:
#   DOCKER_SERVICE_CONNECTION: 'DockerHubConnection'
#   AKS_SERVICE_CONNECTION: 'AKSConnection'
#   DOCKER_REPOSITORY: 'vishal10101'
#   DEPLOYMENT_MODE: ${{ parameters.deploymentMode }}

# stages:
#   - stage: SmartAnalysis
#     displayName: 'Smart Framework Analysis'
#     jobs:
#       - job: AnalyzeApplication
#         displayName: 'Analyze Angular Application'
#         steps:
#           - checkout: self
#             displayName: 'Checkout Framework V2'
          
#           - checkout: angular-app
#             displayName: 'Checkout Angular Application'
#             path: 'angular-app'
          
#           - task: UsePythonVersion@0
#             displayName: 'Setup Python'
#             inputs:
#               versionSpec: '3.9'
#               addToPath: true
          
#           - script: |
#               python -m pip install --upgrade pip
#               pip install -r requirements.txt
#             displayName: 'Install Framework Dependencies'
          
#           - task: PythonScript@0
#             displayName: 'Run Smart Analysis'
#             inputs:
#               scriptSource: 'inline'
#               script: |
#                 import sys
#                 sys.path.append('scripts')
                
#                 from smart_orchestrator import SmartOrchestrator
#                 import json
                
#                 # Initialize orchestrator
#                 orchestrator = SmartOrchestrator()
                
#                 # Analyze the Angular application
#                 repo_path = 'angular-app'
                
#                 # Run analysis
#                 result = orchestrator.process_repository(repo_path)
                
#                 # Save results
#                 with open('analysis-results.json', 'w') as f:
#                     json.dump(result, f, indent=2, default=str)
                
#                 if result['success']:
#                     print(" Smart analysis completed successfully")
#                     config = result['config']
#                     print(f"Framework: {config['app']['framework']}")
#                     print(f"Confidence: {config['detection']['confidence']:.1%}")
#                     print(f"Build Command: {config['build_strategy']['command']}")
#                     print(f"Docker Image: {config['docker']['full_image']}")
#                 else:
#                     print(f" Analysis failed: {result.get('error')}")
#                     sys.exit(1)
          
#           - task: PublishPipelineArtifact@1
#             displayName: 'Publish Analysis Results'
#             inputs:
#               targetPath: 'analysis-results.json'
#               artifact: 'analysis-results'

#   - stage: SmartBuild
#     displayName: 'Smart Build & Containerize'
#     dependsOn: SmartAnalysis
#     condition: and(succeeded(), in(variables.DEPLOYMENT_MODE, 'smart-auto', 'build-only', 'full-pipeline'))
#     jobs:
#       - job: BuildApplication
#         displayName: 'Build Angular Application'
#         steps:
#           - checkout: self
#           - checkout: angular-app
#             path: 'angular-app'
          
#           - task: DownloadPipelineArtifact@2
#             inputs:
#               artifact: 'analysis-results'
#               path: $(Pipeline.Workspace)
          
#           - task: UsePythonVersion@0
#             inputs:
#               versionSpec: '3.9'
          
#           - script: pip install -r requirements.txt
#             displayName: 'Install Dependencies'
          
#           - task: Docker@2
#             displayName: 'Docker Login'
#             inputs:
#               command: 'login'
#               containerRegistry: $(DOCKER_SERVICE_CONNECTION)
          
#           - task: PythonScript@0
#             displayName: 'Execute Smart Build Pipeline'
#             inputs:
#               scriptSource: 'inline'
#               script: |
#                 import sys
#                 import json
#                 sys.path.append('scripts')
                
#                 from smart_orchestrator import SmartOrchestrator
                
#                 # Load analysis results
#                 with open('$(Pipeline.Workspace)/analysis-results.json') as f:
#                     analysis_result = json.load(f)
                
#                 if not analysis_result['success']:
#                     print(" Cannot proceed - analysis failed")
#                     sys.exit(1)
                
#                 # Initialize orchestrator
#                 orchestrator = SmartOrchestrator()
                
#                 # Execute build and docker stages
#                 config = analysis_result['config']
#                 result = orchestrator.process_repository('angular-app', config)
                
#                 if result['success']:
#                     print(" Build and containerization completed")
#                 else:
#                     print(f" Build failed: {result.get('error')}")
#                     sys.exit(1)
          
#           - task: Docker@2
#             displayName: 'Docker Logout'
#             inputs:
#               command: 'logout'
#               containerRegistry: $(DOCKER_SERVICE_CONNECTION)
#             condition: always()

#   - stage: SmartDeploy
#     displayName: 'Smart Deployment'
#     dependsOn: SmartBuild
#     condition: and(succeeded(), in(variables.DEPLOYMENT_MODE, 'smart-auto', 'full-pipeline'))
#     jobs:
#       - deployment: DeployToAKS
#         displayName: 'Deploy to AKS'
#         environment: 'production'
#         strategy:
#           runOnce:
#             deploy:
#               steps:
#                 - checkout: self
                
#                 - task: DownloadPipelineArtifact@2
#                   inputs:
#                     artifact: 'analysis-results'
#                     path: $(Pipeline.Workspace)
                
#                 - task: UsePythonVersion@0
#                   inputs:
#                     versionSpec: '3.9'
                
#                 - script: pip install -r requirements.txt
#                   displayName: 'Install Dependencies'
                
#                 - task: PythonScript@0
#                   displayName: 'Generate Deployment Manifests'
#                   inputs:
#                     scriptSource: 'inline'
#                     script: |
#                       import sys
#                       import json
#                       sys.path.append('scripts')
                      
#                       from smart_deploy import run as deploy_run
                      
#                       # Load configuration
#                       with open('$(Pipeline.Workspace)/analysis-results.json') as f:
#                           analysis_result = json.load(f)
                      
#                       config = analysis_result['config']
                      
#                       # Generate manifests
#                       deploy_result = deploy_run(config)
                      
#                       if deploy_result['success']:
#                           print(" Deployment manifests generated")
#                       else:
#                           print(f" Manifest generation failed: {deploy_result.get('error')}")
#                           sys.exit(1)
                
#                 - task: Kubernetes@1
#                   displayName: 'Deploy to AKS'
#                   inputs:
#                     connectionType: 'Kubernetes Service Connection'
#                     kubernetesServiceEndpoint: $(AKS_SERVICE_CONNECTION)
#                     command: 'apply'
#                     useConfigurationFile: true
#                     configurationType: 'filePath'
#                     configuration: 'generated-k8s-manifest.yaml'
                
#                 - task: Kubernetes@1
#                   displayName: 'Wait for Deployment'
#                   inputs:
#                     connectionType: 'Kubernetes Service Connection'
#                     kubernetesServiceEndpoint: $(AKS_SERVICE_CONNECTION)
#                     command: 'rollout'
#                     arguments: 'status deployment/dsa-visualizer --timeout=300s'
                
#                 - task: Kubernetes@1
#                   displayName: 'Get Deployment Status'
#                   inputs:
#                     connectionType: 'Kubernetes Service Connection'
#                     kubernetesServiceEndpoint: $(AKS_SERVICE_CONNECTION)
#                     command: 'get'
#                     arguments: 'pods,services -l app=dsa-visualizer'
trigger:
  branches:
    include: ['main', 'develop', 'release/*']
  paths:
    exclude: ['README.md', 'docs/*']

pr:
  branches:
    include: ['main', 'develop']

resources:
  repositories:
    - repository: devops-framework
      type: github
      name: VishalDevTechie/devops-framework-v2  # Replace with your actual GitHub repo
      ref: development
      endpoint: GitHub connection
    - repository: angular-app
      type: github
      name: VishalDevTechie/dsa-visualizer
      ref: development
      endpoint: GitHub connection

pool:
  name: Default

parameters:
  - name: deploymentMode
    displayName: "Deployment Mode"
    type: string
    default: smart-auto
    values:
      - smart-auto        # Full auto-detection and deployment
      - analysis-only     # Analysis and config generation only
      - build-only       # Build and containerize only
      - full-pipeline    # Complete pipeline with deployment

variables:
  DOCKER_SERVICE_CONNECTION: 'DockerHubConnection'
  AKS_SERVICE_CONNECTION: 'AKSConnection'
  DOCKER_REPOSITORY: 'vishal10101'
  DEPLOYMENT_MODE: ${{ parameters.deploymentMode }}

stages:
  - stage: SmartAnalysis
    displayName: 'Smart Framework Analysis'
    jobs:
      - job: AnalyzeApplication
        displayName: 'Analyze Angular Application'
        steps:
          - checkout: devops-framework
            displayName: 'Checkout DevOps Framework V2'
            path: 'framework-v2'
          
          - checkout: angular-app
            displayName: 'Checkout Angular Application'
            path: 'angular-app'
          
          - task: UsePythonVersion@0
            displayName: 'Setup Python'
            inputs:
              versionSpec: '3.9'
              addToPath: true
          
          - task: PowerShell@2
            displayName: 'Install Framework Dependencies'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "=== Installing Framework Dependencies ==="
                Write-Host "Current directory: $(Get-Location)"
                Write-Host "Available directories:"
                Get-ChildItem -Directory | Format-Table Name
                
                # Change to framework directory
                if (Test-Path "framework-v2") {
                    Write-Host " Framework-v2 directory found"
                    Set-Location "framework-v2"
                    
                    if (Test-Path "requirements.txt") {
                        Write-Host " requirements.txt found, installing dependencies..."
                        python -m pip install --upgrade pip
                        pip install -r requirements.txt
                        
                        if ($LASTEXITCODE -eq 0) {
                            Write-Host " Dependencies installed successfully"
                        } else {
                            Write-Host "Failed to install dependencies"
                            exit 1
                        }
                    } else {
                        Write-Host " requirements.txt not found"
                        Write-Host "Available files:"
                        Get-ChildItem | Format-Table Name
                        exit 1
                    }
                } else {
                    Write-Host " framework-v2 directory not found"
                    exit 1
                }
          
          - task: PythonScript@0
            displayName: 'Run Smart Analysis'
            inputs:
              scriptSource: 'inline'
              workingDirectory: framework-v2
              script: |
                import sys
                import os
                import json
                
                print(f"Python working directory: {os.getcwd()}")
                print(f"Available files and directories:")
                for item in os.listdir('.'):
                    print(f"  {item}")
                
                # Add scripts directory to Python path
                scripts_path = os.path.join(os.getcwd(), 'scripts')
                if os.path.exists(scripts_path):
                    sys.path.insert(0, scripts_path)
                    print(f" Added scripts directory to path: {scripts_path}")
                else:
                    print(f" Scripts directory not found: {scripts_path}")
                    sys.exit(1)
                
                try:
                    from smart_orchestrator import SmartOrchestrator
                    
                    # Initialize orchestrator
                    orchestrator = SmartOrchestrator()
                    
                    # Analyze the Angular application (relative path from framework directory)
                    repo_path = '../angular-app'
                    print(f"Target repository path: {repo_path}")
                    print(f"Repository exists: {os.path.exists(repo_path)}")
                    
                    # Run analysis only (no build/deploy stages)
                    result = orchestrator.analyze_only(repo_path)
                    
                    # Save results
                    with open('analysis-results.json', 'w') as f:
                        json.dump(result, f, indent=2, default=str)
                    
                    if result['success']:
                        print(" Smart analysis completed successfully")
                        config = result['config']
                        print(f"Framework: {config.get('app', {}).get('framework', 'unknown')}")
                        detection = config.get('detection', {})
                        print(f"Confidence: {detection.get('confidence', 0):.1%}")
                        build_strategy = config.get('build_strategy', {})
                        print(f"Build Command: {build_strategy.get('command', 'unknown')}")
                        docker = config.get('docker', {})
                        print(f"Docker Image: {docker.get('full_image', 'unknown')}")
                    else:
                        print(f" Analysis failed: {result.get('error')}")
                        sys.exit(1)
                        
                except ImportError as e:
                    print(f" Import error: {e}")
                    print("Available files in scripts directory:")
                    if os.path.exists(scripts_path):
                        for file in os.listdir(scripts_path):
                            print(f"  {file}")
                    sys.exit(1)
                except Exception as e:
                    print(f" Unexpected error: {e}")
                    import traceback
                    traceback.print_exc()
                    sys.exit(1)
          
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Analysis Results'
            inputs:
              targetPath: 'framework-v2/analysis-results.json'
              artifact: 'analysis-results'

  - stage: SmartBuild
    displayName: 'Smart Build & Containerize'
    dependsOn: SmartAnalysis
    condition: and(succeeded(), in(variables.DEPLOYMENT_MODE, 'smart-auto', 'build-only', 'full-pipeline'))
    jobs:
      - job: BuildApplication
        displayName: 'Build Angular Application'
        steps:
          - checkout: devops-framework
            displayName: 'Checkout DevOps Framework V2'
            path: 'framework-v2'
          
          - checkout: angular-app
            displayName: 'Checkout Angular Application'
            path: 'angular-app'
          
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'analysis-results'
              path: $(Pipeline.Workspace)
          
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.9'
          
          - task: PowerShell@2
            displayName: 'Install Framework Dependencies'
            inputs:
              targetType: 'inline'
              script: |
                Set-Location "framework-v2"
                pip install -r requirements.txt
          
          - task: Docker@2
            displayName: 'Docker Login'
            inputs:
              command: 'login'
              containerRegistry: $(DOCKER_SERVICE_CONNECTION)
          
          - task: PythonScript@0
            displayName: 'Execute Smart Build Pipeline'
            inputs:
              scriptSource: 'inline'
              workingDirectory: framework-v2
              script: |
                import sys
                import json
                import os
                
                # Add scripts directory to Python path
                scripts_path = os.path.join(os.getcwd(), 'scripts')
                sys.path.insert(0, scripts_path)
                
                try:
                    from smart_orchestrator import SmartOrchestrator
                    
                    # Load analysis results
                    with open('$(Pipeline.Workspace)/analysis-results.json') as f:
                        analysis_result = json.load(f)
                    
                    if not analysis_result['success']:
                        print(" Cannot proceed - analysis failed")
                        sys.exit(1)
                    
                    # Initialize orchestrator
                    orchestrator = SmartOrchestrator()
                    
                    # Execute build and docker stages
                    config = analysis_result['config']
                    repo_path = '../angular-app'
                    
                    print(f"Framework working directory: {os.getcwd()}")
                    print(f"Target repository path: {repo_path}")
                    print(f"Repository exists: {os.path.exists(repo_path)}")
                    
                    result = orchestrator.process_repository(repo_path, config)
                    
                    if result['success']:
                        print(" Build and containerization completed")
                    else:
                        print(f" Build failed: {result.get('error')}")
                        sys.exit(1)
                        
                except Exception as e:
                    print(f" Build pipeline error: {e}")
                    import traceback
                    traceback.print_exc()
                    sys.exit(1)
          
          - task: Docker@2
            displayName: 'Docker Logout'
            inputs:
              command: 'logout'
              containerRegistry: $(DOCKER_SERVICE_CONNECTION)
            condition: always()

  - stage: SmartDeploy
    displayName: 'Smart Deployment to AKS'
    dependsOn: SmartBuild
    condition: and(succeeded(), in(variables.DEPLOYMENT_MODE, 'smart-auto', 'full-pipeline'))
    jobs:
      - deployment: DeployToAKS
        displayName: 'Deploy to AKS Cluster'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: devops-framework
                  displayName: 'Checkout DevOps Framework V2'
                  path: 'framework-v2'
                
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download Analysis Results'
                  inputs:
                    artifact: 'analysis-results'
                    path: $(Pipeline.Workspace)
                
                - task: UsePythonVersion@0
                  displayName: 'Setup Python'
                  inputs:
                    versionSpec: '3.9'
                
                - task: PowerShell@2
                  displayName: 'Install Framework Dependencies'
                  inputs:
                    targetType: 'inline'
                    script: |
                      Set-Location "framework-v2"
                      pip install -r requirements.txt
                      Write-Host " Framework dependencies installed"
                
                - task: PythonScript@0
                  displayName: 'Generate Kubernetes Manifests'
                  inputs:
                    scriptSource: 'inline'
                    workingDirectory: framework-v2
                    script: |
                      import sys
                      import json
                      import os
                      
                      # Add scripts directory to Python path
                      scripts_path = os.path.join(os.getcwd(), 'scripts')
                      sys.path.insert(0, scripts_path)
                      
                      try:
                          from smart_deploy import run as deploy_run
                          
                          # Load configuration
                          with open('$(Pipeline.Workspace)/analysis-results.json') as f:
                              analysis_result = json.load(f)
                          
                          if not analysis_result['success']:
                              print(" Cannot deploy - analysis failed")
                              sys.exit(1)
                          
                          config = analysis_result['config']
                          
                          # Ensure deployment configuration exists
                          if 'deployment' not in config:
                              config['deployment'] = {
                                  'namespace': 'default',
                                  'environment': 'production',
                                  'replicas': 1
                              }
                          
                          print(f" Generating manifests for: {config['app']['name']}")
                          print(f" Docker Image: {config['docker']['full_image']}")
                          
                          # Generate manifests
                          deploy_result = deploy_run(config)
                          
                          if deploy_result['success']:
                              print(" Kubernetes manifests generated successfully")
                              print(f" Manifest file: {deploy_result['manifest_path']}")
                              
                              # Display manifest preview
                              with open(deploy_result['manifest_path'], 'r') as f:
                                  manifest_content = f.read()
                                  print("\n Generated Manifest Preview:")
                                  print("-" * 50)
                                  print(manifest_content[:1000] + "..." if len(manifest_content) > 1000 else manifest_content)
                                  print("-" * 50)
                          else:
                              print(f" Manifest generation failed: {deploy_result.get('error')}")
                              sys.exit(1)
                              
                      except Exception as e:
                          print(f" Deploy script error: {e}")
                          import traceback
                          traceback.print_exc()
                          sys.exit(1)
                
                - task: Kubernetes@1
                  displayName: 'Connect to AKS and Create Namespace'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(AKS_SERVICE_CONNECTION)
                    command: 'apply'
                    useConfigurationFile: true
                    configurationType: 'inline'
                    inline: |
                      apiVersion: v1
                      kind: Namespace
                      metadata:
                        name: default
                        labels:
                          managed-by: devops-framework-v2
                  continueOnError: true
                
                - task: Kubernetes@1
                  displayName: 'Deploy Application to AKS'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(AKS_SERVICE_CONNECTION)
                    command: 'apply'
                    useConfigurationFile: true
                    configurationType: 'filePath'
                    configuration: 'framework-v2/generated-k8s-manifest.yaml'
                    outputFormat: 'yaml'
                
                - task: Kubernetes@1
                  displayName: 'Wait for Rollout to Complete'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(AKS_SERVICE_CONNECTION)
                    command: 'rollout'
                    arguments: 'status deployment/$(Build.Repository.Name) --timeout=300s --namespace=default'
                  timeoutInMinutes: 10
                
                - task: Kubernetes@1
                  displayName: 'Get Application Status'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(AKS_SERVICE_CONNECTION)
                    command: 'get'
                    arguments: 'all -l managed-by=devops-framework-v2 --namespace=default -o wide'
                
                - task: Kubernetes@1
                  displayName: 'Get Service External IP'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(AKS_SERVICE_CONNECTION)
                    command: 'get'
                    arguments: 'service --namespace=default -o wide'
                
                - task: PowerShell@2
                  displayName: 'Display Deployment Summary'
                  inputs:
                    targetType: 'inline'
                    script: |
                      Write-Host " Deployment completed!" -ForegroundColor Green
                      Write-Host " Deployment Summary:" -ForegroundColor Cyan
                      Write-Host "  Application: $(Build.Repository.Name)" -ForegroundColor White
                      Write-Host "  Namespace: default" -ForegroundColor White
                      Write-Host "  Environment: production" -ForegroundColor White
                      Write-Host "  Build: $(Build.BuildNumber)" -ForegroundColor White
                      Write-Host ""
                      Write-Host " Next Steps:" -ForegroundColor Yellow
                      Write-Host "  1. Check the External IP from the service output above"
                      Write-Host "  2. Access your application at http://<EXTERNAL-IP>"
                      Write-Host "  3. Monitor deployment: kubectl get pods --namespace=default"